name: Release BAP component

on:
  workflow_call:
    inputs:
      version:
        description: 'Version number to use'
        type: string
        required: true
      git_email:
        description: 'Git config email'
        type: string
        required: true
      git_name:
        description: 'Git config name'
        type: string
        required: true
      release_candidate:
        description: 'Create a release candidate version'
        type: string
        required: true
      module_name:
        description: 'Name of the module'
        type: string
        required: true
      module_repository:
        description: 'Repository of the module'
        type: string
        required: true
      module_directory:
        description: 'Location of the module in Bitergia Analytics'
        type: string
        required: true
      forced_version:
        description: 'Force version when there are no changes.'
        type: string
        required: true
      plugin_url:
        description: 'Installable URL for Bitergia Analytics plugin.'
        type: string
        required: false
      dotplot_url:
        description: 'Installable URL for Dotplot visualization plugin.'
        type: string
        required: false
      network_url:
        description: 'Installable URL for Network visualization plugin.'
        type: string
        required: false
      polar_url:
        description: 'Installable URL for Polar visualization plugin.'
        type: string
        required: false
      radar_url:
        description: 'Installable URL for Radar visualization plugin.'
        type: string
        required: false
    secrets:
      access_token:
        description: 'Token for updating repositories'
        required: true

    outputs:
      notes:
        description: "Notes content for the package"
        value: ${{ jobs.release.outputs.notes }}
      plugin_url:
        description: "Installable URL for plugin"
        value: ${{ jobs.release.outputs.plugin_url }}

jobs:
  release:
    runs-on: ubuntu-latest
    environment: bap-release
    outputs:
      notes: ${{ steps.notes.outputs.notes }}
      plugin_url: ${{ steps.assets.outputs.plugin_url }}
    
    steps:
      - name: Checkout source code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          repository: ${{ inputs.module_repository }}
          path: ${{ inputs.module_directory }}
          token: '${{ secrets.access_token }}'
          fetch-depth: 0
      
      - name: Set up Git config
        run: |
          git config --global user.email "${{ inputs.git_email }}"
          git config --global user.name "${{ inputs.git_name }}"

      - name: Install release-tools
        run: pip install git+https://github.com/Bitergia/release-tools.git#egg=release-tools

      - id: versions
        name: Compare versions to check if this should be updated
        run: |
          if [ ${{ contains(inputs.module_repository, 'plugin') }} == 'true' ]
          then
            version=$(jq -r '.version' package.json)
          else
            version=$(<version)
          fi
          echo "Old version: $version"
          echo "New version: ${{ inputs.version }}"
          if [ "$version" = "${{ inputs.version }}" ]
          then
            echo "updated=0" >> $GITHUB_OUTPUT
          else
            echo "updated=1" >> $GITHUB_OUTPUT
          fi
        working-directory: ${{ inputs.module_directory }}

      - name: Update version in JSON files
        if: ${{ contains(inputs.module_directory, 'plugin') }}
        shell: bash
        run: |
          package_contents="$(jq '.version = "${{ inputs.version }}"' package.json)" && \
          echo -E "${package_contents}" > package.json
          osd_contents="$(jq '.version = "${{ inputs.version }}"' opensearch_dashboards.json)" && \
          echo -E "${osd_contents}" > opensearch_dashboards.json
          echo ${osd_contents}
        working-directory: ${{ inputs.module_directory }}
      
      - id: version
        name: Update version file
        if: ${{ ! contains(inputs.module_directory, 'plugin') }}
        shell: bash
        run: |
          new_version=${{ inputs.version }}
          echo $new_version > version
        working-directory: ${{ inputs.module_directory }}

      - name: Update plugin URLs in Dockerfile
        if: ${{ inputs.module_directory == 'bitergia-analytics-opensearch-dashboards' }}
        id: dockerfile
        shell: bash
        run: |
          line="RUN opensearch-dashboards-plugin install ${{ inputs.plugin_url }}"
          sed -i "/bitergia-analytics-plugin/s|.*|$line|" Dockerfile

          line="RUN opensearch-dashboards-plugin install ${{ inputs.radar_url }}"
          sed -i "/radar/s|.*|$line|" Dockerfile

          line="RUN opensearch-dashboards-plugin install ${{ inputs.network_url }}"
          sed -i "/network/s|.*|$line|" Dockerfile

          line="RUN opensearch-dashboards-plugin install ${{ inputs.dotplot_url }}"
          sed -i "/dotplot/s|.*|$line|" Dockerfile

          line="RUN opensearch-dashboards-plugin install ${{ inputs.polar_url }}"
          sed -i "/polar/s|.*|$line|" Dockerfile
        working-directory: ${{ inputs.module_directory }}
      
      - id: notes
        name: Generate release notes
        run: |
          version=${{ inputs.version }}
          eof="EOF$(date +%s)"
          release_file="releases/$version.md"
          if [ ${{ inputs.release_candidate }} == 'true' ]
          then
            newsArg=''
            rcArg='--pre-release'
          else
            newsArg='--news'
            rcArg=''
          fi

          if [ ${{ inputs.forced_version }} != true ]
          then
            notes "${{ inputs.module_name }}" $version $newsArg --authors $rcArg
          else
            module_name=${{ inputs.module_name }}
            today=$(date -u "+%Y-%m-%d")
            cat << EOF > $release_file
            ## $module_name $version - ($today)
            
            * No changes on this component. The version is bumped to align it
              with the rest of the components.
          EOF
            # Update NEWS file if it is not a release candidate
            if [ ${{ inputs.release_candidate }} != 'true' ]
            then
              mv NEWS old_NEWS
              echo -e "# Releases\n" >> NEWS
              cat $release_file >> NEWS
              cat old_NEWS | tail -n +2 >> NEWS
              rm old_NEWS
            fi
          fi

          # Save release notes in 'notes' output
          echo 'notes<<$eof' >> $GITHUB_OUTPUT
          cat $release_file >> $GITHUB_OUTPUT
          echo '$eof' >> $GITHUB_OUTPUT
        working-directory: ${{ inputs.module_directory }}
      
      - id: current_time
        if: ${{ steps.versions.outputs.updated == 1 }}
        name: Store current time to get the release workflow
        run: |
          datetime=$(date +"%Y-%m-%dT%H:%M:%S%z")
          echo "datetime=$datetime" >> $GITHUB_OUTPUT
          echo $datetime

      - id: publish
        if: ${{ steps.versions.outputs.updated == 1 }}
        name: Publish new version.
        run: |
          echo "publish"
        working-directory: ${{ inputs.module_directory }}
      
      - id: wait-for-release
        if: ${{ steps.versions.outputs.updated == 1 }}
        name: Wait for release to finish.
        continue-on-error: true
        run: |
          echo "wait for release"

      - id: assets
        name: Get plugin installable URL
        shell: bash
        if: ${{ ( steps.wait-for-release.outcome == 'success' || steps.versions.outputs.updated == 0 ) && contains(inputs.module_directory, 'plugin') }}
        run: |
          osd_version=$(jq -r '.opensearchDashboardsVersion' opensearch_dashboards.json)
          filename_version=$(jq -r '.version | scan("^[0-9.]+")' package.json)
          plugin_url="https://github.com/${{ inputs.module_repository}}/releases/download/${{ inputs.version }}/${{ inputs.module_name }}-${filename_version}_${osd_version}.zip"
          echo "plugin_url=$plugin_url" >> $GITHUB_OUTPUT
        working-directory: ${{ inputs.module_directory }}

      - id: rollback
        name: Rollback last commits and remove tag
        if: (steps.wait-for-release.outcome == 'failure') && (steps.versions.outputs.updated == 1)
        run: |
          echo "rollback"
        working-directory: ${{ inputs.module_directory }}
